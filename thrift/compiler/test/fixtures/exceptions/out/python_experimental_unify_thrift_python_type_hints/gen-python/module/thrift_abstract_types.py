
# EXPERIMENTAL - DO NOT USE !!!
# See `experimental_unify_thrift_python_type_hints` documentation in thrift compiler

#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import abc as _abc
import typing as _typing

import folly.iobuf as _fbthrift_iobuf


class Fiery(_abc.ABC):
    @property
    @_abc.abstractmethod
    def message(self) -> str: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.Fiery": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.Fiery": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.Fiery": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.Fiery": ...  # type: ignore

class Serious(_abc.ABC):
    @property
    @_abc.abstractmethod
    def not_sonnet(self) -> _typing.Optional[str]: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.Serious": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.Serious": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.Serious": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.Serious": ...  # type: ignore

class ComplexFieldNames(_abc.ABC):
    @property
    @_abc.abstractmethod
    def error_message(self) -> str: ...
    @property
    @_abc.abstractmethod
    def internal_error_message(self) -> str: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, str]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.ComplexFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.ComplexFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.ComplexFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.ComplexFieldNames": ...  # type: ignore

class CustomFieldNames(_abc.ABC):
    @property
    @_abc.abstractmethod
    def error_message(self) -> str: ...
    @property
    @_abc.abstractmethod
    def internal_error_message(self) -> str: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, str]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.CustomFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.CustomFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.CustomFieldNames": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.CustomFieldNames": ...  # type: ignore

class ExceptionWithPrimitiveField(_abc.ABC):
    @property
    @_abc.abstractmethod
    def message(self) -> str: ...
    @property
    @_abc.abstractmethod
    def error_code(self) -> int: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, int]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.ExceptionWithPrimitiveField": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.ExceptionWithPrimitiveField": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.ExceptionWithPrimitiveField": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.ExceptionWithPrimitiveField": ...  # type: ignore

class ExceptionWithStructuredAnnotation(_abc.ABC):
    @property
    @_abc.abstractmethod
    def message_field(self) -> str: ...
    @property
    @_abc.abstractmethod
    def error_code(self) -> int: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, int]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.ExceptionWithStructuredAnnotation": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.ExceptionWithStructuredAnnotation": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.ExceptionWithStructuredAnnotation": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.ExceptionWithStructuredAnnotation": ...  # type: ignore

class Banal(_abc.ABC):
    pass
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[None]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "module.thrift_mutable_types.Banal": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "module.thrift_types.Banal": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "module.types.Banal": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.Banal": ...  # type: ignore
